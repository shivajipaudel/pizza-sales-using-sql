-- Basic: Retrieve the total number of orders placed.

SELECT 
    COUNT(order_id) AS total_order
FROM
    orders;

-- Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS total_revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id;
    
    -- Identify the highest-priced pizza.
    
SELECT 
    pizza_types.name, pizzas.price
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1; 

-- Identify the most common pizza size ordered.
select quantity, count(order_details_id)
from order_details group by quantity;

SELECT 
    size, COUNT(order_details_id) AS total_order
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY size
ORDER BY total_order DESC;

-- List the top 5 most ordered pizza types along with their quantities.

SELECT 
    SUM(order_details.quantity) AS quantity, pizza_types.name
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id
        JOIN
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
GROUP BY name
ORDER BY quantity DESC
LIMIT 5;

-- Intermediate: Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    category, SUM(order_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY category
ORDER BY quantity DESC;

-- Determine the distribution of orders by hour of the day.
SELECT 
    HOUR(order_time) AS hour, COUNT(order_id) AS order_count
FROM
    orders
GROUP BY hour;

-- simple
-- Join relevant tables to find the category-wise distribution of pizzas. 

select category, count(name) as order_count from pizza_types
group by category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(quantity), 0) AS avg_pizza_ordered_per_day
FROM
    (SELECT 
        order_date, SUM(quantity) AS quantity
    FROM
        orders
    JOIN order_details ON orders.order_id = order_details.order_id
    GROUP BY order_date) AS order_quantity;
    
    -- Determine the top 3 most ordered pizza types based on revenue. 
    select pizza_types.name, sum(pizzas.price*order_details.quantity) as revenue
    from pizza_types
    join pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id
    join order_details on pizzas.pizza_id = order_details.pizza_id
    group by name
    order by revenue desc
    limit 3;
    
    -- Advanced:
-- Calculate the percentage contribution of each pizza type to total revenue.
-- formula revenue % = (Revenue generated/total_revenue)*100
select pizza_types.category, round((sum(pizzas.price*order_details.quantity)/ (SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS total_revenue
FROM
    order_details
        JOIN
    pizzas ON order_details.pizza_id = pizzas.pizza_id) ) *100,2) as revenue
    from pizza_types
    join pizzas on pizza_types.pizza_type_id = pizzas.pizza_type_id
    join order_details on pizzas.pizza_id = order_details.pizza_id
    group by category
    order by revenue desc;
    
    -- Analyze the cumulative revenue generated over time. 
    -- Yesterday earning => 200
    -- today earning 100 => 200+100 = 300
    -- next day earning 400 => 300+400 = 700
select order_date,
sum(revenue) over (order by order_date) as cum_revenue
from
(select orders.order_date,
sum(order_details.quantity*pizzas.price) as revenue
from order_details join pizzas
on order_details.pizza_id = pizzas.pizza_id
join orders
on orders.order_id = order_details.order_id
group by orders.order_date) as sales;


-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.
 select name, revenue from
 (select category, name, revenue,
 rank() over (partition by category order by revenue desc) as rn
 from
 (select pizza_types.category, pizza_types.name,
 sum((order_details.quantity)*pizzas.price) as revenue
 from pizza_types join pizzas
 on pizza_types.pizza_type_id = pizzas.pizza_type_id
 join order_details
 on order_details.pizza_id = pizzas.pizza_id
 group by pizza_types.category, pizza_types.name) as a) as b
 where rn <= 3;
